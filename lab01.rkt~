#lang racket

; Taylor Nation, Michael Lumetta
; Lab 01

; Due Sunday, January 27 at 11:59pm

; Please read the README file included in this directory.  You can
; read the file in DrRacket's editor simply by opening it using
; the File menu.

; 1. Complete exercise 1.2 (page 21), rewritten here:

;    Translate the following expression into prefix form
;    (5 + 4 + (2 - (3 - (6 + 4/5)))) / (3 * (6 - 2) * (2 - 7))

(/(+ 5 4(- 2 ( - 3 (+ 6 4/5)))) (* 3 (- 6 2)(- 2 7)))


; 2. Write a procedure which takes three numbers as arguments
;    and returns the median (middle) of the three values. Use
;    *if* in your solution instead of *cond*.
(define median
  (lambda (a b c)
    (if(> a b)
       (if (< a c) a c)
       (if (< b c) b c)
     )
   )
 )
; For example:  (Uncomment and use as test cases when you're done)
 (median 3 4 5); ==> 4
; (median 6 1 8); ==> 6
; (median 5 5 6); ==> 5

(define fica-tax
  (lambda (income)
    (cond((<= income 113700) (* .0765 income))
         ((and ( > income 113700) (<= income 200000)) (+(* .062 113700 )(* income .0145)))
         ((> income 200000) ( + (* .0145 200000) (* .062 113700) (* (- income 200000) .0235)))
         )
    )
  )
; 3. Write a procedure called fica-tax which computes the 
;    amount of social security tax plus medicare tax. Use *cond*
;    in your solution instead of *if*.

;    For 2013, the social security tax is 6.2% of income up to
;    $113,700. No social security tax is paid on earnings in excess of
;    $113,700.  For 2013, the medicare tax is 1.45% of earnings up to
;    $200,000.  For *excess* income above $200,000, the medicare tax
;    rises to 2.35%.


; For example:  (Uncomment and use as test cases when you're done)
 
  (fica-tax 25000) ; ==> 1912.5
 (fica-tax 113000); ==> 8644.5
 (fica-tax 200000); ==> 9949.4
 (fica-tax 201000); ==> 9972.9



; 4. Complete exercise 1.4 (page 21), rewritten here:

; Observe that our model of evaluation allows for combinations whose
; operators are compound expressions. Use this observation to describe
; the behavior of the following procedure:

(define a-plus-abs-b
  (lambda (a b)
    ((if (> b 0) + -) a b)))


;Adds a and b if b is positive. If b is negative, subtracts b from a. Adds the absolute value of b to a




; 5. Complete exercise 1.6 (page 25) -- not transcribed here.  Find the 
; question in the text.  You will have to read Section 1.1.7 first, too.
; Here is a link to the question:
; http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.6

; Below is the supporting code taken from SICP pages 23-25.

; Note that I have converted the book's "shortcut" function notation to
; the lambda notation we will use in class.



(define sqrt-iter
  (lambda (guess x)
    (new-if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x)
                   x))))

; Taken from SICP page 23

(define improve
  (lambda (guess x)
    (average guess (/ x guess))))

; Taken from SICP page 23
(define average
  (lambda (x y)
    (/ (+ x y) 2)))

; Taken from SICP page 24
(define good-enough?
  (lambda (guess x)
    (< (abs (- (square guess) x)) 0.001)))

; Not in the book, but you need it for the good-enough? function above.
(define square
  (lambda (x)
    (* x x)))

; Taken from SICP page 24 (though I changed the name from sqrt)
(define square-root 
  (lambda (x)
    (sqrt-iter 1.0 x)))

; Taken from SICP page 25
(define new-if
  (lambda   (predicate then-clause else-clause)
    (cond (predicate then-clause)
          (else else-clause))))

(square-root 4)
; After modifying the sqrt-iter procedure as described in 1.6, answer:
; a. What happens when Alyssa attempts to use this to compute square 
;    roots?  Explain.
; Since new-if is not a special form, the Racket rule of evaluation applies. Good enough?
; evaluates to false, and guess evaluates to itself, then the sqrt-iter is called next.
; New-if never evaluates, and the recursive cycle continues infinitely.

; b. Come up with another example where "new-if" does not work as you would
;    expect "if" to work.
; Any function that recursively moves from a start guess to a goal using a check would not
; work with new-if. Consider this function:

 (define iter-correctGuess?
 	(lambda (guess goal)
 		(if (isGoal guess) #T
 			(iter-correctGuess (+ guess 1) goal)
 			)
 		)
 	)
 	
 ; Using new-if here, we would evaluate isGoal and the recursive call to iter-correctGuess
 ; before the new-if, leading to another infinite loop.



; 6. Complete exercise 1.8 (page 26)
; http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_thm_1.8

  
(define cube-root-iter
  (lambda (guess x)
    (if (good-enough-cube? guess x)
        guess
        (cube-root-iter (improve-cube guess x) x
                        ))))

(define good-enough-cube?
  (lambda (guess x)
    (< (abs (- (cube guess) x)) 0.001)))

(define cube
  (lambda (num)
    (* num num num)))

(define improve-cube
  (lambda (guess x)
    (/ (+ (/ x (square guess)) (* 2 guess)) 3)))

(define cube-root
  (lambda (x)
    (cube-root-iter 1.0 x)))

(cube-root 64) ;ought to evaluate to 4.

